# Configuration for ProGuard
# From http://proguard.sourceforge.net/index.html#/manual/examples.html#androidapplication

-target 1.5
-optimizationpasses 5
-dontskipnonpubliclibraryclasses
-dontpreverify
-allowaccessmodification
# The -optimizations option disables some arithmetic simplifications that Dalvik 1.0 and 1.5 can't handle.
-optimizations !code/simplification/arithmetic,!code/allocation/variable,!field/*,!class/merging/*
-keepattributes *Annotation*,SourceFile,LineNumberTable,Signature

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * implements com.integralblue.callerid.contacts.ContactsHelper
-keep class com.integralblue.callerid.inject.CallerIDModule {
    protected void configure();
}

-keep class com.google.inject.Binder
-keep class com.google.inject.Key
-keep class com.google.inject.Provider
-keep class com.google.inject.TypeLiteral
-keepclassmembers class * {
    @com.google.inject.Inject <init>(...);
}

-keep public class * extends android.view.View {
    public <init>(android.content.Context);
    public <init>(android.content.Context, android.util.AttributeSet);
    public <init>(android.content.Context, android.util.AttributeSet, int);
    public void set*(...);
}

-keepclassmembers class android.support.v4.app.Fragment
{
	public android.view.View getView();
}

-keepclassmembers class android.support.v4.app.FragmentManager
{
	public android.support.v4.app.Fragment findFragmentByTag(java.lang.String);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembers class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclasseswithmembers class * {
    public void finalizeReferent();
}

-keepclasseswithmembers class * {
    public java.lang.ref.ReferenceQueue startFinalizer(java.lang.Class, java.lang.Object);
}

-keepclassmembers class * implements android.os.Parcelable {
    static android.os.Parcelable$Creator CREATOR;
}

-keepclassmembers class **.R$* {
    public static <fields>;
}

# We don't use the licensing service
#-keep public interface com.android.vending.licensing.ILicensingService

-keepclasseswithmembernames class * {
    native <methods>;
}

-keepclassmembers class * extends java.lang.Enum {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# Removes all calls to Log. Delete the methods you want to keep.
-assumenosideeffects class android.util.Log {
    public static int v(...);
    public static int d(...);
    public static int i(...);
    #public static int w(...);
    #public static int e(...);
    #public static int wtf(...);
}

-keep public class roboguice.**

-keep class * implements com.google.inject.Provider {
        public *** get();
}

-keep class com.google.inject.name.NamedImpl {
        *;
}

# Jackson
-keep enum org.codehaus.jackson.annotate.** {
    *;
}

# Jackson indirectly references classes in these namespaces that aren't in Android but are in J2SE.
# Because they're indirectly referenced, it's okay to simply ignore the fact they don't exist.
-dontwarn javax.xml.**,org.w3c.dom.**

# Application classes that will be serialized/deserialized using Jackson
-keep class com.integralblue.callerid.CallerIDResult.** {
	*;
}
# End Jackson

# we don't use the google maps api
-dontwarn roboguice.activity.RoboMapActivity
# roboguice's jar has testing classes in it which don't resolve because the Android testing classes aren't available for non-testing
-dontwarn roboguice.test.**
-dontnote roboguice.test.**
-assumenosideeffects class roboguice.test.**

# osmdroid
-keep class android.widget.ZoomButtonsController {
    boolean isVisible();
    boolean onTouch(android.view.View,android.view.MotionEvent);
}

-keep class android.location.Geocoder{
	boolean isPresent();
}

# we don't use memcached
-dontwarn org.apache.http.impl.client.cache.memcached.**
-assumenosideeffects class org.apache.http.impl.client.cache.memcached.**

# we don't use ehcache
-dontwarn org.apache.http.impl.client.cache.ehcache.**
-assumenosideeffects class org.apache.http.impl.client.cache.ehcache.**

# we don't use joda time
-dontnote org.joda.**
-dontwarn org.joda.**
-assumenosideeffects class org.joda.**

# we don't use AvalonLogger
-dontnote org.apache.commons.logging.impl.AvalonLogger
-dontwarn org.apache.commons.logging.impl.AvalonLogger
-assumenosideeffects class org.apache.commons.logging.impl.AvalonLogger

# we don't use log4j
-dontnote org.apache.commons.logging.impl.Log4JLogger
-dontwarn org.apache.commons.logging.impl.Log4JLogger
-assumenosideeffects class org.apache.commons.logging.impl.Log4JLogger

# we don't use LogKit
-dontnote org.apache.commons.logging.impl.LogKitLogger
-dontwarn org.apache.commons.logging.impl.LogKitLogger
-assumenosideeffects class org.apache.commons.logging.impl.LogKitLogger

# we don't use ServletContextCleaner
-dontnote org.apache.commons.logging.impl.ServletContextCleaner
-dontwarn org.apache.commons.logging.impl.ServletContextCleaner
-assumenosideeffects class org.apache.commons.logging.impl.ServletContextCleaner

# we don't use LogSource
-dontnote org.apache.commons.logging.LogSource
-dontwarn org.apache.commons.logging.LogSource
-assumenosideeffects class org.apache.commons.logging.LogSource

-keepclassmembers class android.os.StrictMode {
    android.os.StrictMode$ThreadPolicy getThreadPolicy();
    void enableDefaults();
}

-keepclassmembers class android.os.StrictMode$ThreadPolicy$Builder {
    android.os.StrictMode$ThreadPolicy build();
    android.os.StrictMode$ThreadPolicy$Builder permitAll();
}

#We never use httpclient 3.x
-dontwarn org.apache.commons.httpclient.**
-assumenosideeffects class org.apache.commons.httpclient.**

#We never use httpclient 4.x
-dontwarn org.apache.http.**
-assumenosideeffects class org.apache.http.**

# we don't use Rome (RSS/Atom utilities)
-dontwarn  com.google.code.rome.**
-assumenosideeffects class com.google.code.rome.**

# we don't use XML
-dontwarn org.simpleframework.xml.**
-assumenosideeffects class org.simpleframework.xml.**

# we don't use joda time
-dontwarn org.joda.**
-assumenosideeffects class org.joda.**

# we don't use gson
-dontwarn com.google.gson.**
-assumenosideeffects class com.google.gson.**

# we don't use this class, and it would pull in Commons Logging (which we otherwise don't use)
-dontwarn org.springframework.web.client.support.RestGatewaySupport
-assumenosideeffects class org.springframework.web.client.support.RestGatewaySupport

